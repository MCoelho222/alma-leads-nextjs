name: Test Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: alma
          POSTGRES_PASSWORD: alma123
          POSTGRES_DB: alma_leads
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=postgresql://alma:alma123@localhost:5432/alma_leads" >> $GITHUB_ENV

      - name: Setup database
        run: |
          npx prisma migrate deploy
          npx prisma generate

      - name: Run tests
        run: npm test

      - name: Run build check
        run: npm run build

  security:
    name: Security & Quality Checks
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for vulnerabilities
        run: |
          npm audit --json > audit-results.json || true
          if [ -s audit-results.json ]; then
            echo "Security vulnerabilities found:"
            cat audit-results.json
          fi

  status-check:
    name: All Tests Passed
    runs-on: ubuntu-latest
    needs: [test, security]
    if: always()

    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" != "success" ] || [ "${{ needs.security.result }}" != "success" ]; then
            echo "❌ Tests failed - PR cannot be merged"
            exit 1
          else
            echo "✅ All tests passed - PR ready for review"
          fi
